{"version":3,"sources":["../../../src/agents/Profile/index.ts","../../../src/utilities/index.ts","../../../src/events/SparkEvent/index.ts","../../../src/errors/spark.ts","../../../src/agents/SparkAgent/index.ts"],"sourcesContent":["import { SparkErrors } from \"../../errors/spark\";\nimport { SparkAgent } from \"../SparkAgent\";\n\nexport class Profile extends SparkAgent {\n  public avatar: string;\n  public handle: string;\n\n  public async import(data: Record<string, any>): Promise<void> {\n    if (!data) throw SparkErrors.SPARK_IMPORT_ERROR();\n    this.avatar = data.avatar\n    this.handle = data.handle\n    return Promise.resolve();\n  }\n\n  public async export(): Promise<Record<string, any>> {\n    return Promise.resolve({\n      avatar: this.avatar,\n      handle: this.handle,\n    });\n  }\n}\n","import nacl from \"tweetnacl\";\nimport util from \"tweetnacl-util\";\nimport { createId, isCuid } from '@paralleldrive/cuid2';\n\n/**\n * @returns a timestamp in milliseconds since epoch in terms of UTC\n */\nexport function utcEpochTimestamp() {\n  const now = new Date()\n  return now.getTime() + now.getTimezoneOffset() * 60 * 1000;\n}\n\n/**\n * @returns a parsed json string or null if it fails\n */\nexport function parseJSON(data: string) {\n  try {\n    return JSON.parse(data);\n  } catch (e) {\n    return data;\n  }\n}\n\n/**\n * @returns a new unique salt\n */\nexport function randomSalt(len: number = 32) {\n  return util.encodeBase64(nacl.randomBytes(len));\n}\n\n/**\n * @returns a new unique identifier\n */\nexport function randomCuid() {\n  return createId();\n}\n\n/**\n * @returns whether the identifier is a valid CUID\n */\nexport function validCuid(id: string) {\n  return isCuid(id);\n}\n\n/**\n * SNAKE_CASE to PascalCase\n * @returns a PascalCase string\n */\nexport function snakeToPascal(str: string) {\n  return str.toLowerCase().replace(/_([a-z])/g, (_, char) => char.toUpperCase()).replace(/^[a-z]/, char => char.toUpperCase());\n}","import { randomCuid, utcEpochTimestamp } from \"../../utilities\";\nimport { ConfirmEventType, CreateEventFunction, CreateEventParams, ErrorEventType, RequestEventType, SparkEventInterface, SparkEventParams } from \"./types\";\n\n\nexport class SparkEvent implements SparkEventInterface {\n  readonly type:  RequestEventType | ConfirmEventType | ErrorEventType;\n  readonly timestamp: number;\n  readonly metadata: Record<string, any>;\n  readonly data: Record<string, any>;\n  readonly digest: string;\n\n  constructor(args: SparkEventParams) {\n    this.type = args.type;\n    this.metadata = args.metadata;\n    this.timestamp = args.timestamp;\n    if (args.data) this.data = args.data;\n    if (args.digest) this.digest = args.digest;\n  }\n}\n\nexport class SparkRequestEvent extends SparkEvent {\n  declare readonly type: RequestEventType;\n}\nexport class SparkConfirmEvent extends SparkEvent {\n  declare readonly type: ConfirmEventType;\n}\nexport class SparkErrorEvent extends SparkEvent {\n  declare readonly type: ErrorEventType;\n}\n\nexport const createEvent: CreateEventFunction = (params: CreateEventParams): any => {\n  const { type, data, digest } = params;\n  const timestamp: number = utcEpochTimestamp();\n  const metadata = { ...(params.metadata || {}), eventId: randomCuid() };\n\n  const invalidEvent = (!type.endsWith(\"_REQUEST\") && !type.endsWith(\"_CONFIRM\") && !type.endsWith(\"_ERROR\"));\n  const invalidParams = !!((data && digest) || (!data && !digest));\n\n  let event;\n  if (!!data) event = new SparkEvent({ type, metadata, timestamp, data });\n  else if (!!digest) event = new SparkEvent({ type, metadata, timestamp, digest });\n  else event = null;\n\n  if (invalidEvent || invalidParams || !event) {\n    throw new SparkEvent({\n      type: 'CREATE_EVENT_ERROR',\n      metadata: {\n        eventId: randomCuid()\n      },\n      timestamp,\n      data: { message: invalidEvent ? `Invalid event type: ${type}` : `Invalid event params: ${JSON.stringify(params)}` },\n    });\n  }\n\n  // TODO - settings for optional logging\n  const isError = event.type.endsWith(\"_ERROR\");\n  // if (isError) console.error(event);\n\n  return event;\n};\n","import { createEvent } from \"../events/SparkEvent\";\n\nexport const SparkErrorTypes = {\n  SPARK_IMPORT_ERROR: 'SPARK_IMPORT_ERROR',\n  SPARK_EXPORT_ERROR: 'SPARK_EXPORT_ERROR',\n  SPARK_UNEXPECTED_ERROR: 'SPARK_UNEXPECTED_ERROR',\n} as const;\n\nexport const SparkErrors = {\n  SPARK_IMPORT_ERROR: ({ metadata = {} }: { metadata?: Record<string, any> } = {}) => createEvent({\n    type: SparkErrorTypes.SPARK_IMPORT_ERROR,\n    metadata: { ...metadata },\n    data: { message: 'Failed to import data.' }\n  }),\n  SPARK_EXPORT_ERROR: ({ metadata = {} }: { metadata?: Record<string, any> } = {}) => createEvent({\n    type: SparkErrorTypes.SPARK_EXPORT_ERROR,\n    metadata: { ...metadata },\n    data: { message: 'Failed to export data.' }\n  }),\n  SPARK_UNEXPECTED_ERROR: ({ metadata = {}, message }: { metadata?: Record<string, any>, message?: string } = {}) => createEvent({\n    type: SparkErrorTypes.SPARK_UNEXPECTED_ERROR,\n    metadata: { ...metadata },\n    data: { message: message || 'Unexpected spark error.' }\n  }),\n}\n\n","import { SparkErrors } from \"../../errors\";\nimport { SparkInterface } from \"../../spark/types\";\nimport { SparkAgentInterface } from \"./types\";\n\nexport abstract class SparkAgent implements SparkAgentInterface {\n  protected _spark: SparkInterface<any, any, any, any, any>;\n  \n  constructor(spark: SparkInterface<any, any, any, any, any>) {\n    this._spark = spark;\n  }\n\n  public async import(data: Record<string, any>): Promise<void> {\n    if (!data) throw SparkErrors.SPARK_IMPORT_ERROR();\n    return Promise.resolve();\n  }\n  \n  public async export(): Promise<Record<string, any>> {\n    return Promise.resolve({});\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,uBAAiB;AACjB,4BAAiB;AACjB,mBAAiC;AAK1B,SAAS,oBAAoB;AAClC,QAAM,MAAM,oBAAI,KAAK;AACrB,SAAO,IAAI,QAAQ,IAAI,IAAI,kBAAkB,IAAI,KAAK;AACxD;AAuBO,SAAS,aAAa;AAC3B,aAAO,uBAAS;AAClB;;;AC/BO,IAAM,aAAN,MAAgD;AAAA,EAC5C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAET,YAAY,MAAwB;AAClC,SAAK,OAAO,KAAK;AACjB,SAAK,WAAW,KAAK;AACrB,SAAK,YAAY,KAAK;AACtB,QAAI,KAAK;AAAM,WAAK,OAAO,KAAK;AAChC,QAAI,KAAK;AAAQ,WAAK,SAAS,KAAK;AAAA,EACtC;AACF;AAYO,IAAM,cAAmC,CAAC,WAAmC;AAClF,QAAM,EAAE,MAAM,MAAM,OAAO,IAAI;AAC/B,QAAM,YAAoB,kBAAkB;AAC5C,QAAM,WAAW,EAAE,GAAI,OAAO,YAAY,CAAC,GAAI,SAAS,WAAW,EAAE;AAErE,QAAM,eAAgB,CAAC,KAAK,SAAS,UAAU,KAAK,CAAC,KAAK,SAAS,UAAU,KAAK,CAAC,KAAK,SAAS,QAAQ;AACzG,QAAM,gBAAgB,CAAC,EAAG,QAAQ,UAAY,CAAC,QAAQ,CAAC;AAExD,MAAI;AACJ,MAAI,CAAC,CAAC;AAAM,YAAQ,IAAI,WAAW,EAAE,MAAM,UAAU,WAAW,KAAK,CAAC;AAAA,WAC7D,CAAC,CAAC;AAAQ,YAAQ,IAAI,WAAW,EAAE,MAAM,UAAU,WAAW,OAAO,CAAC;AAAA;AAC1E,YAAQ;AAEb,MAAI,gBAAgB,iBAAiB,CAAC,OAAO;AAC3C,UAAM,IAAI,WAAW;AAAA,MACnB,MAAM;AAAA,MACN,UAAU;AAAA,QACR,SAAS,WAAW;AAAA,MACtB;AAAA,MACA;AAAA,MACA,MAAM,EAAE,SAAS,eAAe,uBAAuB,IAAI,KAAK,yBAAyB,KAAK,UAAU,MAAM,CAAC,GAAG;AAAA,IACpH,CAAC;AAAA,EACH;AAGA,QAAM,UAAU,MAAM,KAAK,SAAS,QAAQ;AAG5C,SAAO;AACT;;;ACzDO,IAAM,kBAAkB;AAAA,EAC7B,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,wBAAwB;AAC1B;AAEO,IAAM,cAAc;AAAA,EACzB,oBAAoB,CAAC,EAAE,WAAW,CAAC,EAAE,IAAwC,CAAC,MAAM,YAAY;AAAA,IAC9F,MAAM,gBAAgB;AAAA,IACtB,UAAU,EAAE,GAAG,SAAS;AAAA,IACxB,MAAM,EAAE,SAAS,yBAAyB;AAAA,EAC5C,CAAC;AAAA,EACD,oBAAoB,CAAC,EAAE,WAAW,CAAC,EAAE,IAAwC,CAAC,MAAM,YAAY;AAAA,IAC9F,MAAM,gBAAgB;AAAA,IACtB,UAAU,EAAE,GAAG,SAAS;AAAA,IACxB,MAAM,EAAE,SAAS,yBAAyB;AAAA,EAC5C,CAAC;AAAA,EACD,wBAAwB,CAAC,EAAE,WAAW,CAAC,GAAG,QAAQ,IAA0D,CAAC,MAAM,YAAY;AAAA,IAC7H,MAAM,gBAAgB;AAAA,IACtB,UAAU,EAAE,GAAG,SAAS;AAAA,IACxB,MAAM,EAAE,SAAS,WAAW,0BAA0B;AAAA,EACxD,CAAC;AACH;;;ACpBO,IAAe,aAAf,MAAyD;AAAA,EACpD;AAAA,EAEV,YAAY,OAAgD;AAC1D,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,MAAa,OAAO,MAA0C;AAC5D,QAAI,CAAC;AAAM,YAAM,YAAY,mBAAmB;AAChD,WAAO,QAAQ,QAAQ;AAAA,EACzB;AAAA,EAEA,MAAa,SAAuC;AAClD,WAAO,QAAQ,QAAQ,CAAC,CAAC;AAAA,EAC3B;AACF;;;AJhBO,IAAM,UAAN,cAAsB,WAAW;AAAA,EAC/B;AAAA,EACA;AAAA,EAEP,MAAa,OAAO,MAA0C;AAC5D,QAAI,CAAC;AAAM,YAAM,YAAY,mBAAmB;AAChD,SAAK,SAAS,KAAK;AACnB,SAAK,SAAS,KAAK;AACnB,WAAO,QAAQ,QAAQ;AAAA,EACzB;AAAA,EAEA,MAAa,SAAuC;AAClD,WAAO,QAAQ,QAAQ;AAAA,MACrB,QAAQ,KAAK;AAAA,MACb,QAAQ,KAAK;AAAA,IACf,CAAC;AAAA,EACH;AACF;","names":[]}